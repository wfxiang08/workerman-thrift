<?php
namespace geoip_service;
/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface GeoIpServiceIf extends \rpc_thrift\services\RpcServiceBaseIf {
  /**
   * @param string $ip
   * @return \geoip_service\GeoData 输入和输出的结果
   * 
   * @throws \rpc_thrift\services\RpcException
   */
  public function IpToGeoData($ip);
  /**
   * @param string $ip
   * @return \geoip_service\LatLng
   * @throws \rpc_thrift\services\RpcException
   */
  public function GetLatlng($ip);
  /**
   * @param string $ip
   * @return string
   * @throws \rpc_thrift\services\RpcException
   */
  public function GetCityName($ip);
  /**
   * @param string $ip
   * @return string
   * @throws \rpc_thrift\services\RpcException
   */
  public function GetCountryName($ip);
  /**
   * @param string $ip
   * @return string
   * @throws \rpc_thrift\services\RpcException
   */
  public function GetCountryCode($ip);
  /**
   * @param string $ip
   * @return string
   * @throws \rpc_thrift\services\RpcException
   */
  public function GetProvince($ip);
}


class GeoIpServiceClient extends \rpc_thrift\services\RpcServiceBaseClient implements \geoip_service\GeoIpServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function IpToGeoData($ip)
  {
    $this->send_IpToGeoData($ip);
    return $this->recv_IpToGeoData();
  }

  public function send_IpToGeoData($ip)
  {
    $args = new \geoip_service\GeoIpService_IpToGeoData_args();
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'IpToGeoData', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('IpToGeoData', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_IpToGeoData()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\geoip_service\GeoIpService_IpToGeoData_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \geoip_service\GeoIpService_IpToGeoData_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("IpToGeoData failed: unknown result");
  }

  public function GetLatlng($ip)
  {
    $this->send_GetLatlng($ip);
    return $this->recv_GetLatlng();
  }

  public function send_GetLatlng($ip)
  {
    $args = new \geoip_service\GeoIpService_GetLatlng_args();
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetLatlng', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetLatlng', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetLatlng()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\geoip_service\GeoIpService_GetLatlng_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \geoip_service\GeoIpService_GetLatlng_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("GetLatlng failed: unknown result");
  }

  public function GetCityName($ip)
  {
    $this->send_GetCityName($ip);
    return $this->recv_GetCityName();
  }

  public function send_GetCityName($ip)
  {
    $args = new \geoip_service\GeoIpService_GetCityName_args();
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetCityName', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetCityName', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetCityName()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\geoip_service\GeoIpService_GetCityName_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \geoip_service\GeoIpService_GetCityName_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("GetCityName failed: unknown result");
  }

  public function GetCountryName($ip)
  {
    $this->send_GetCountryName($ip);
    return $this->recv_GetCountryName();
  }

  public function send_GetCountryName($ip)
  {
    $args = new \geoip_service\GeoIpService_GetCountryName_args();
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetCountryName', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetCountryName', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetCountryName()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\geoip_service\GeoIpService_GetCountryName_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \geoip_service\GeoIpService_GetCountryName_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("GetCountryName failed: unknown result");
  }

  public function GetCountryCode($ip)
  {
    $this->send_GetCountryCode($ip);
    return $this->recv_GetCountryCode();
  }

  public function send_GetCountryCode($ip)
  {
    $args = new \geoip_service\GeoIpService_GetCountryCode_args();
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetCountryCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetCountryCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetCountryCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\geoip_service\GeoIpService_GetCountryCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \geoip_service\GeoIpService_GetCountryCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("GetCountryCode failed: unknown result");
  }

  public function GetProvince($ip)
  {
    $this->send_GetProvince($ip);
    return $this->recv_GetProvince();
  }

  public function send_GetProvince($ip)
  {
    $args = new \geoip_service\GeoIpService_GetProvince_args();
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetProvince', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetProvince', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetProvince()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\geoip_service\GeoIpService_GetProvince_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \geoip_service\GeoIpService_GetProvince_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("GetProvince failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class GeoIpService_IpToGeoData_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $ip = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_IpToGeoData_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_IpToGeoData_args');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_IpToGeoData_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\geoip_service\GeoData',
      ),
    1 => array(
      'var' => 're',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\rpc_thrift\services\RpcException',
      ),
    );

  /**
   * @var \geoip_service\GeoData
   */
  public $success = null;
  /**
   * @var \rpc_thrift\services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_IpToGeoData_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \geoip_service\GeoData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \rpc_thrift\services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_IpToGeoData_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetLatlng_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $ip = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetLatlng_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetLatlng_args');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetLatlng_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\geoip_service\LatLng',
      ),
    1 => array(
      'var' => 're',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\rpc_thrift\services\RpcException',
      ),
    );

  /**
   * @var \geoip_service\LatLng
   */
  public $success = null;
  /**
   * @var \rpc_thrift\services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetLatlng_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \geoip_service\LatLng();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \rpc_thrift\services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetLatlng_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetCityName_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $ip = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetCityName_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetCityName_args');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetCityName_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    1 => array(
      'var' => 're',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\rpc_thrift\services\RpcException',
      ),
    );

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \rpc_thrift\services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetCityName_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \rpc_thrift\services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetCityName_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetCountryName_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $ip = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetCountryName_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetCountryName_args');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetCountryName_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    1 => array(
      'var' => 're',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\rpc_thrift\services\RpcException',
      ),
    );

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \rpc_thrift\services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetCountryName_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \rpc_thrift\services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetCountryName_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetCountryCode_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $ip = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetCountryCode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetCountryCode_args');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetCountryCode_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    1 => array(
      'var' => 're',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\rpc_thrift\services\RpcException',
      ),
    );

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \rpc_thrift\services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetCountryCode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \rpc_thrift\services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetCountryCode_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetProvince_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $ip = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetProvince_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetProvince_args');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoIpService_GetProvince_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    1 => array(
      'var' => 're',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\rpc_thrift\services\RpcException',
      ),
    );

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \rpc_thrift\services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'GeoIpService_GetProvince_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \rpc_thrift\services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoIpService_GetProvince_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


