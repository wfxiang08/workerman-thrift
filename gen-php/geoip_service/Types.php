<?php
namespace geoip_service;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 输入和输出的结果
 */
class GeoData {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'country_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'country_iso_code',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'city_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'lat',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'lng',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'timezone',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'continent',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'continent_code',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'province',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $country_name = null;
  /**
   * @var string
   */
  public $country_iso_code = null;
  /**
   * @var string
   */
  public $city_name = null;
  /**
   * @var string
   */
  public $lat = null;
  /**
   * @var string
   */
  public $lng = null;
  /**
   * @var string
   */
  public $timezone = null;
  /**
   * @var string
   */
  public $continent = null;
  /**
   * @var string
   */
  public $continent_code = null;
  /**
   * @var string
   */
  public $province = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['country_name'])) {
        $this->country_name = $vals['country_name'];
      }
      if (isset($vals['country_iso_code'])) {
        $this->country_iso_code = $vals['country_iso_code'];
      }
      if (isset($vals['city_name'])) {
        $this->city_name = $vals['city_name'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
      if (isset($vals['timezone'])) {
        $this->timezone = $vals['timezone'];
      }
      if (isset($vals['continent'])) {
        $this->continent = $vals['continent'];
      }
      if (isset($vals['continent_code'])) {
        $this->continent_code = $vals['continent_code'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
    }
  }

  public function getName() {
    return 'GeoData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country_iso_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timezone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continent_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoData');
    if ($this->country_name !== null) {
      $xfer += $output->writeFieldBegin('country_name', TType::STRING, 1);
      $xfer += $output->writeString($this->country_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country_iso_code !== null) {
      $xfer += $output->writeFieldBegin('country_iso_code', TType::STRING, 2);
      $xfer += $output->writeString($this->country_iso_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city_name !== null) {
      $xfer += $output->writeFieldBegin('city_name', TType::STRING, 3);
      $xfer += $output->writeString($this->city_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::STRING, 4);
      $xfer += $output->writeString($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::STRING, 5);
      $xfer += $output->writeString($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timezone !== null) {
      $xfer += $output->writeFieldBegin('timezone', TType::STRING, 6);
      $xfer += $output->writeString($this->timezone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continent !== null) {
      $xfer += $output->writeFieldBegin('continent', TType::STRING, 7);
      $xfer += $output->writeString($this->continent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continent_code !== null) {
      $xfer += $output->writeFieldBegin('continent_code', TType::STRING, 8);
      $xfer += $output->writeString($this->continent_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 9);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LatLng {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'lat',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'lng',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $lat = null;
  /**
   * @var string
   */
  public $lng = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
    }
  }

  public function getName() {
    return 'LatLng';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LatLng');
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::STRING, 1);
      $xfer += $output->writeString($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::STRING, 2);
      $xfer += $output->writeString($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $VERSION;

  static protected function init_VERSION() {
    return "0.0.1";
  }
}


